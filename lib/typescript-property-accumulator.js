// Generated by CoffeeScript 1.9.2
(function() {
  var addProperties, fs, lineStream, spawn, us,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  spawn = require('child_process').spawn;

  us = require('underscore');

  lineStream = require('line-input-stream');

  addProperties = function(tscripts) {
    var classes, realErrorCount, tsc;
    classes = [];
    realErrorCount = 0;
    tsc = spawn(__dirname + '/../node_modules/typescript/bin/tsc', tscripts);
    return lineStream(tsc.stdout).on('line', (function(_this) {
      return function(line) {
        var EREGEX, klass, match, property, ref, type;
        EREGEX = /error TS2339: Property '(.*)' does not exist on type '(.*)'/;
        if (ref = line.match(EREGEX) || false, match = ref[0], property = ref[1], type = ref[2], ref) {
          klass = (classes[type] || (classes[type] = []));
          if (indexOf.call(klass, property) < 0) {
            return klass.push(property);
          }
        } else {
          return realErrorCount += 1;
        }
      };
    })(this)).on('end', (function(_this) {
      return function() {
        var file, j, len, results;
        results = [];
        for (j = 0, len = tscripts.length; j < len; j++) {
          file = tscripts[j];
          results.push((function(file) {
            return fs.readFile(file, 'utf8', function(err, data) {
              var CDEFREGEX, _, className, decls, i, k, len1, line, lines, newData, prop, properties, ref, spacing;
              if (err) {
                throw err;
              }
              lines = data.split('\n');
              CDEFREGEX = /^(\s*)(export )?class ([a-zA-Z_$][a-zA-Z_$0-9]*) ([^{}]*){/;
              for (i = k = 0, len1 = lines.length; k < len1; i = ++k) {
                line = lines[i];
                if (ref = line.match(CDEFREGEX) || false, _ = ref[0], spacing = ref[1], _ = ref[2], className = ref[3], ref) {
                  if (properties = classes[className]) {
                    spacing += '    ';
                    decls = (function() {
                      var l, len2, results1;
                      results1 = [];
                      for (l = 0, len2 = properties.length; l < len2; l++) {
                        prop = properties[l];
                        results1.push(spacing + "public " + prop + ";");
                      }
                      return results1;
                    })();
                    decls.unshift(line);
                    decls.push('');
                    lines[i] = decls;
                  }
                }
              }
              newData = us.flatten(lines).join('\n');
              return fs.writeFile(file, newData);
            });
          })(file));
        }
        return results;
      };
    })(this));
  };

  module.exports = addProperties;

  if (require.main === module) {
    addProperties(process.argv.slice(2));
  }

}).call(this);

//# sourceMappingURL=typescript-property-accumulator.js.map
